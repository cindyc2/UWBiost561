[{"path":"https://cindyc2.github.io/UWBiost561/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 UWBiost561 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"instructions","dir":"Articles","previous_headings":"","what":"Instructions","title":"BIOST 561: Homework 4","text":"instructions essential, please read carefully. Submit homework GitHub page RMarkdown (.Rmd) HTML files. Please answer question prompt show code (inline). , code visible knitted chunks. complete homework, may write HW3.Rmd file. (recommended complete homework R Studio, clicking Knit button knit homework.)","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"disclosures","dir":"Articles","previous_headings":"","what":"Disclosures","title":"BIOST 561: Homework 4","text":"Please disclose collaborated ’ve used ChatGPT (comparable AI tool) extent completing homework. See syllabus course expectations. study group includes Gabby, Obehi, Max Alejandro. assume talk project. don’t plan use ChatGPT, study group often . Prof. Kevin helped worked functions. wound using co-pilot unit tests.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"note-about-the-homework","dir":"Articles","previous_headings":"","what":"Note about the homework","title":"BIOST 561: Homework 4","text":"Note: R code homework homework. mainly write .R files inside R tests folders. Therefore, need show little code inside R Markdown file. need write things inside R Markdown file questions explicitly ask . Please use https://docs.google.com/document/d/1-ZTDPp39zbhsKbQ2FfBoCtiXKQj0jQSg75MAatYfiGI/edit?usp=sharing resource homework.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"code-of-conduct-for-this-homework","dir":"Articles","previous_headings":"","what":"Code of conduct for this homework","title":"BIOST 561: Homework 4","text":"Please respectful peers homework. student’s compute_maximal_partial_clique() function anonymized used every student homework. implementations function work smoother others. Nonetheless, 1) please respectful implementations throughout homework, might realize ’re talking author implementation, 2) please feel embarrassed (knowing implementation , since wrote ) work well initially thought. Please try “figure ” student wrote implementation. overwhelmingly confident wrote implementation suits current comfort R (, course, different student student).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"q1-doing-a-code-review-of-two-other-implementations","dir":"Articles","previous_headings":"","what":"Q1: Doing a code review of two other implementations","title":"BIOST 561: Homework 4","text":"Intent: intent question review implementations. see sense coding compares peers. Note 1: instructions HW3 unclear define density clique size one (.e., just one node) – (Kevin) apologize. Let’s define edge density 1 node 1 (returning set 1 node always valid clique, albeit largest one). GitHub Issues HW3, assigned two compute_maximal_partial_clique implementations review. example, assigned #1 #3, reviewing implementations compute_maximal_partial_clique1() compute_maximal_partial_clique3(). Question 1A: gone Lecture 8 install compute_maximal_partial_clique implementations UWBiost561 package. short, find zip file Canvas called hw4_implementations.zip. Download , unzip file. see bunch functions files--put--R-folder folder, including compute_maximal_partial_clique_master.R many compute_maximal_partial_clique implementations (.R file). Copy paste files R folder UWBiost561 package. , DESCRIPTION file, please add igraph Imports:. , DESCRIPTION file contain Imports: (minimum): ’ve done things, run devtools::check() add documentation compute_maximal_partial_clique functions. (warnings errors completion HW3, still warnings errors now.) , run devtools::install() install new UWBiost561 package. (nothing report question. make changes R Markdown file.) Question 1B: Looking two implementations given, summarize think implementations one four sentences . (practice reading people’s code.) Implementation 9 starts checking matrix meets criteria homework 3, excludes nodes size 1 (size less 2). creates helper function compute density clique uses combinatorics test sub-matrices. starts largest matrix successfully found partial clique. function also checks adj_mat actually matrix, hope/assume isSymmetric also checks. Implementation 16 takes similar approach using combinatorics work largest matrix testing current edge density along way. describe brute force approach (limited efficiency larger matrix) found clique implementation 9 quickly. Question 1C: terms coding clarity (.e., whether code gives good answer), recommendations give original author code improve code’s clarity? can documentation, variable naming, whether code factorized dedicated functions, portion code hard understand, etc. Give none two suggestions implementation. (can give suggestions thought code spectacular – even ’s returning great answer, can easily understand code despite written someone else.) Implementation 9 ! thorough descriptions, stop messages failure function runs. implementation slow tried use unit test time passed 5 tests. Implementation 16 Roxygen skeleton sparse conveys information. run simulation study, think stalls implementation 16, even though really similar implementaiton 9. don’t know difference . Question 1D: HW3, wrote least 5 unit tests implementation compute_maximal_partial_clique(). R Markdown file (.e., tests folder), copy-paste 5 unit tests see two compute_maximal_partial_clique implementations assigned pass unit tests. assigned implementations #2 #7, test functions compute_maximal_partial_clique2() compute_maximal_partial_clique7(). Note 1: 5 unit tests, need try 5 question. Since ’re testing two implementations, ’ll 10 unit tests total. Note 2: copy-pasting unit tests, can directly copy-paste entire testthat() function R Markdown file contents testthat(). (See example R Markdown file . , can either use library(testthat) R Markdown file prefix test_that() functions testthat::.) Implementation 9 Implementation 16 Note 3: can write two large R code chunks, one implementation’s 5 unit tests. Since implementation ’ve assigned might necessarily pass unit tests, please set error = TRUE flag R code chunk options. (See example R Markdown file .) Note 4: like test things weren’t HW3, feel free . (tests question don’t literally need ones created HW3.)","code":"Imports:   igraph test_that(\"A test that passes\", {   x = 10   expect_true(x == 10) }) #> Test passed 😸 test_that(\"A test that fails\", {   x = 10   expect_true(x != 10) }) #> ── Failure: A test that fails ────────────────────────────────────────────────── #> x != 10 is not TRUE #>  #> `actual`:   FALSE #> `expected`: TRUE #> Error: #> ! Test failed #Part 1 context(\"Testing compute_maximal_partial_clique9\")  #1 test_that(\"compute_maximal_partial_clique9 works\", {   set.seed(11)    res1 <- generate_partial_clique(n = 10,                                  clique_fraction = 0.5,                                  clique_edge_density = 0.9)   res2 <- compute_maximal_partial_clique9(adj_mat = res1$adj_mat,                                         alpha = 0.5)    expect_true(is.list(res2)) }) #> ── Error: compute_maximal_partial_clique9 works ──────────────────────────────── #> Error in `generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.9)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed #passed!   #2 test_that(\"compute_maximal_partial_clique9 give an actual edge of a clique\", {   library(matrixcalc)   set.seed(10)    res1 <- generate_partial_clique(n = 10,                                   clique_fraction = 1,                                   clique_edge_density = 1)   res2 <- compute_maximal_partial_clique9(adj_mat = res1$adj_mat,                                          alpha = 1)    expect_true(res1$adj_mat[res2$clique_idx[[1]],  res2$clique_idx[[2]]] == 1) }) #> ── Error: compute_maximal_partial_clique9 give an actual edge of a clique ────── #> Error in `generate_partial_clique(n = 10, clique_fraction = 1, clique_edge_density = 1)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed #passed  # 3 test_that(\"compute_maximal_partial_clique9 rejects empty matrix\", {   set.seed(10)    res3 <- as.matrix(0)   expect_error(compute_maximal_partial_clique9(adj_mat = res3,                                               alpha = 1)) }) #> Test passed 😸 #passed!  #4 test_that(\"compute_maximal_partial_clique9 won't work with permuted rows\", {   set.seed(10)    res7 <- generate_partial_clique(n = 10,                                   clique_fraction = 0.5,                                   clique_edge_density = 0.6)   res7 <- res7$adj_mat[sample(1:nrow(res7$adj_mat),nrow(res7$adj_mat)),]     expect_error(compute_maximal_partial_clique9(adj_mat = res7,                                               alpha = 1)) }) #> ── Error: compute_maximal_partial_clique9 won't work with permuted rows ──────── #> Error in `generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.6)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed # passed!    #5 test_that(\"compute_maximal_partial_clique9 rejects rectangle matrix\", {   set.seed(10)    res1 <- as.matrix(c(1,2,3,4,5,6))    expect_error(compute_maximal_partial_clique9(adj_mat = res1,                                               alpha = 1)) }) #> Test passed 😸 #passed!   #6 # test_that(\"compute_maximal_partial_clique9 runs in less than 30 seconds\", { #   start_time <- Sys.time() #   res1 <- generate_partial_clique(n = 30, #                                   clique_fraction = 0.5, #                                   clique_edge_density = 0.9) #   res2 <- compute_maximal_partial_clique9(adj_mat = res1$adj_mat, #                                          alpha = 1) #  #   end_time <- Sys.time() #  #   execution_time <- end_time - start_time #   expect_true(execution_time < 30, \"Execution time should be less than 30 seconds\") # }) #stalled for a long time but ultimately said passed! #Part 2  context(\"Testing compute_maximal_partial_clique16\")  #1 test_that(\"compute_maximal_partial_clique16 works\", {   set.seed(12)    res1 <- generate_partial_clique(n = 10,                                  clique_fraction = 0.5,                                  clique_edge_density = 0.9)   res2 <- compute_maximal_partial_clique16(adj_mat = res1$adj_mat,                                         alpha = 0.5)    expect_true(is.list(res2)) }) #> ── Error: compute_maximal_partial_clique16 works ─────────────────────────────── #> Error in `generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.9)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed #passed!   #2 test_that(\"compute_maximal_partial_clique16 give an actual edge of a clique\", {   library(matrixcalc)   set.seed(10)    res1 <- generate_partial_clique(n = 10,                                   clique_fraction = 1,                                   clique_edge_density = 1)   res2 <- compute_maximal_partial_clique16(adj_mat = res1$adj_mat,                                          alpha = 1)    expect_true(res1$adj_mat[res2$clique_idx[[1]],  res2$clique_idx[[2]]] == 1) }) #> ── Error: compute_maximal_partial_clique16 give an actual edge of a clique ───── #> Error in `generate_partial_clique(n = 10, clique_fraction = 1, clique_edge_density = 1)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed #passed  # 3 test_that(\"compute_maximal_partial_clique16 rejects empty matrix\", {   set.seed(10)    res3 <- as.matrix(0)   expect_error(compute_maximal_partial_clique16(adj_mat = res3,                                               alpha = 1)) }) #> Test passed 😸 #passed!  #4 test_that(\"compute_maximal_partial_clique16 won't work with permuted rows\", {   set.seed(10)    res7 <- generate_partial_clique(n = 10,                                   clique_fraction = 0.5,                                   clique_edge_density = 0.6)   res7 <- res7$adj_mat[sample(1:nrow(res7$adj_mat),nrow(res7$adj_mat)),]     expect_error(compute_maximal_partial_clique16(adj_mat = res7,                                               alpha = 1)) }) #> ── Error: compute_maximal_partial_clique16 won't work with permuted rows ─────── #> Error in `generate_partial_clique(n = 10, clique_fraction = 0.5, clique_edge_density = 0.6)`: could not find function \"generate_partial_clique\" #> Error: #> ! Test failed # passed!    #5 test_that(\"compute_maximal_partial_clique16 rejects rectangle matrix\", {   set.seed(10)    res1 <- as.matrix(c(1,2,3,4,5,6))    expect_error(compute_maximal_partial_clique16(adj_mat = res1,                                               alpha = 1)) }) #> Test passed 😸 #passed!   #6 # test_that(\"compute_maximal_partial_clique16 runs in less than 30 seconds\", { #   start_time <- Sys.time() #   res1 <- generate_partial_clique(n = 30, #                                   clique_fraction = 0.5, #                                   clique_edge_density = 0.9) #   res2 <- compute_maximal_partial_clique16(adj_mat = res1$adj_mat, #                                          alpha = 1) #  #   end_time <- Sys.time() #  #   execution_time <- end_time - start_time #   expect_true(execution_time < 30, \"Execution time should be less than 30 seconds\") # }) #stalled for a long time! rowSums(1:5) #> Error in rowSums(1:5): 'x' must be an array of at least two dimensions \"asdf\" + \"1234\" #> Error in \"asdf\" + \"1234\": non-numeric argument to binary operator"},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"q2-constructing-a-simulation-study","dir":"Articles","previous_headings":"","what":"Q2: Constructing a simulation study","title":"BIOST 561: Homework 4","text":"Intent: intent question construct simulation study ’ll run Bayes. question, ’ll designing simulation. Bayes couple reasons: 1) give experience running code Bayes, 2) simulations might take couple hours run. Note: inside file compute_maximal_partial_clique_master.R (now R folder), ’ve provided two functions: compute_maximal_partial_clique_master() compute_correct_density(). find functions useful Q2 Q3. Question 2A: Please run following code. run , something gone wrong UWBiost561 package. (instance, might generate_partial_clique() function work correctly located R package.) can see, compute_maximal_partial_clique_master() function: 1) takes number argument (allows control implementation compute_maximal_partial_clique ’re using) 2) sets timer (, 30 seconds) function terminates 30 seconds. Using provided code framework, use compute_maximal_partial_clique_master() setting time_limit function terminates prematurely, .e., time_limit set small number. (, , hypothetically, function required 40 seconds complete, set time_limit 30 seconds.) changing ’ number ’ argument, can use implementation compute_maximal_partial_clique prefer question. Note: question, want generate adjacency matrix n large (.e., value close 50), time_limit small (.e., just seconds). deliberately want cause timed_out status. Question 2B: Describe like simulation study sentences. Specifically, making simulation plan (see Lecture 8 details). plan answer following questions: generating random graphs analysis? qualities random graphs ? (can use generate_partial_clique() function, describe kind graph generate_partial_clique() makes.) use generate_partial_clique n = 10 clique fraction = 0.5 2 levels clique edge density = 0.9 varying random graphs across different “levels” analysis? (example, can vary n, clique_fraction, clique_edge_density, /alpha. simulation study can focus changing one two values.) vary 2 levels clique edge density (alpha = 0.5 0.9.) different methods using simulation study? (question moot homework since ’ll using 25 implementations compute_maximal_partial_clique, please write thoroughness.) using 25 implementations. hope learn simulation study? Alternatively, trends/patterns/results hoping see? implementations consistently better finding large (largest) partial clique. many trials intend run per “level”? 5 trials per level alpha much time estimate simulation study need maximum? See Note 2 . 5 trials per alpha* 2 levels alpha* 25 implementations * 30 seconds maximum (even n= 10 clique fraction = 0.5 ) 5 * 2 * 25 * 30 =7500 seconds 125 minutes (2 hours 5 minutes max) hard requirements imposing simulation study : must use 25 implementations compute_maximal_partial_clique simulation study, method used every adjacency matrix generate. simulation study must least 2 different levels, least 2 trials level. choosing vary n (number nodes), largest n consider simulation study n=50. Please use compute_maximal_partial_clique_master() using 25 implementations (instead calling compute_maximal_partial_clique implementations directly). Additionally, please set time_limit larger 30 (.e., regardless large simulation study gets, please allow 1 minute implementation). 25 implementations, wouldn’t want just one trial take 15 minutes! simulation study take less 5 hours run completion single core (.e., parallelized). See Note 2 . ideas can test : often method get maximal partial clique (among 25 methods) number nodes n changes, alpha changes? can also try incorporating fast implementation (terms time) simulation study. Feel free post Canvas Discussions thoughts simulation study unsure simulation study. Note 1: choose vary n simulation study, value n 30 make simulation take long time finish. Note 2: use compute_maximal_partial_clique_master(), can time function time_limit number seconds (default, 30 seconds). Therefore, number problem instances solve , roughly speaking, (number levels) x (number methods) x (number trials per level), maximum time simulation need (number levels) x (number methods) x (number trials per level) x 30 seconds. Note 3: Please design straightforward complicated simulation study appropriate comfort coding. overwhelmed homework, can code simulation study takes minutes complete. (can use demo class rough skeleton simulation study. course, can design way perform simulation study well.) Note 4: simulation study, (course) need generate random adjacency matrices. can use generate_partial_clique() already created HW3, can also modify generate_partial_clique() better suit simulation study’s goals. Note 5: feel overwhelmed, can --less plan simulation study similar demo done class (Lecture 8). Specifically, inside hw4_implementations.zip, files hw4-demo_bayes_execute.R, hw4-demo_bayes_execute.slurm, `hw4-demo_bayes_plot.R effectively tell specific simulation study. Feel free use scripts closely want simulation study. (However, still need make simulation function follow guidelines still. still non-trivial work still need .) (writing question, coding question.) Question 2C: R folder, design function executes intended simulation plan. (purposely loose open-ended designing simulation regarding inputs outputs. contrast HW3, everything spelled explicitly, now giving task meaningfully designing inputs/outputs.) Note 1: want use compute_maximal_partial_clique_master() simulation. make life easier switching different implementations. main difficulties question : extract store results compute_maximal_partial_clique_master() decide meaningful outputs simulation function return (example, probably don’t need return adj_mat adjacency matrices )? highly depend simulation plan trying study! handle instances compute_maximal_partial_clique_master(): ) times , B) errors, C) outputs alleged clique_idx invalid doesn’t form partial clique edge density alpha larger. Note 2: aware – healthy skeptic using people’s code simulation. Just method claims found partial clique, verify indeed partial clique edge density larger alpha. might want use compute_correct_density() function provided compute_maximal_partial_clique_master.R. Note 3: asking make function perform simulation (instead just R script) since asking test simulation function Question 2D . Note 4: allow simulation function take input different levels simulation study number trials (parameters choosing). way, can easily “test” “simple” simulation study Question 2D . Note 5: (ideally) want set simulation trial level, generate one random adjacency matrix used 25 different implementations compute_maximal_partial_clique. gives “fair” comparison across 25 methods. also might want set random seed (via set.seed()) generating random adjacency matrix trial can easily reproduce results particular trial needed. Note 6: question hardest part HW4. Since question purposely open-ended, harder use ChatGPT help function. However, future coding experiences open-ended, practicing “coding ChatGPT” unstructured settings good. encourage work classmates question (, per syllabus rules, directly copy classmate’s code). (nothing report question. code R folder, R Markdown file.) Question 2D: Create (one) unit tests simulation function. unit test (like unit tests HW3) tests/testthat folder. also purposely vague many tests kind unit tests write. decide! , ’re unleash code perform (potentially long) simulation test, hope ’ve tested simulation code well enough good use time. Note: unit tests fast (.e., take minute run). means unit tests performing complete simulation study. , ’ll useless unit test takes hour figure unit test passed. However, want unit tests (take less minute) give confidence code work running complete simulation study (might take hour). (nothing report question. code tests/testthat folder, R Markdown file.) Question 2E: Similar HW3, please include screenshot output running devtools::check(). still UWBiost561 package passes checks unit tests. (guideline, one screenshot show first 20--lines devtools::check() results, second screenshot show last 20--lines results.) can use knitr::include_graphics() function include figures inside R Markdown file. intent question provide “evidence” devtools::check() went smoothly. need worry screenshots show specifically.","code":"library(UWBiost561) set.seed(10) data <- UWBiost561::generate_partial_clique(n = 10,                                              clique_fraction = 0.5,                                             clique_edge_density = 0.95)  set.seed(10) result1 <- UWBiost561::compute_maximal_partial_clique_master(   adj_mat = data$adj_mat,    alpha = 0.95,    number = 11,    time_limit = 30 ) result1  set.seed(10) result2 <- UWBiost561::compute_maximal_partial_clique11(   adj_mat = data$adj_mat,    alpha = 0.95 ) result2 library(UWBiost561) set.seed(10) data <- UWBiost561::generate_partial_clique(n = 50,                                              clique_fraction = 0.5,                                             clique_edge_density = 0.95)  set.seed(10) result1 <- UWBiost561::compute_maximal_partial_clique_master(   adj_mat = data$adj_mat,    alpha = 0.95,    number = 11,    time_limit = 5 ) result1  set.seed(10) result2 <- UWBiost561::compute_maximal_partial_clique11(   adj_mat = data$adj_mat,    alpha = 0.95 ) result2 #knitr::include_graphics(\"devtools HW4_1.png\") #knitr::include_graphics(\"devtools HW4_2.png\")"},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"q3-performing-the-simulation-study","dir":"Articles","previous_headings":"","what":"Q3: Performing the simulation study","title":"BIOST 561: Homework 4","text":"Intent: intent question perform simulation study practice visualizing simulation results. Now ’ve written function perform simulation study, want write code perform actual simulation study. technically involve least 3 new files vignettes folder: one .R file perform simulation study, one accompanying .slurm script submit .R file Bayes, one .R file load simulation results visualize results. following questions guide three files. Question 3A: vignettes folder, make file called HW4_simulation_execute.R, R script : 1) loads UWBiost561 package, 2) executes simulation function inside UWBiost561 package. simulation “full” simulation study outlined Question 2B . (specific .R file might take couple hours finish, depending complex simulation study .) end HW4_simulation_execute.R save simulation results HW4_simulation.RData, .RData file. (example, argument save() function file = ~/HW4_simulation.RData. save results HW4_simulation.RData file home directory Bayes.) , make accompanying HW4_simulation_execute.slurm submits HW4_simulation_execute.R job Bayes. Please limit 10gb memory (.e., line HW4_simulation_execute.slurm read #SBATCH --mem-per-cpu=10gb). (simulation study require 10 Gigabytes memory. , likely practical simulation study.) (nothing report question. code vignettes folder, R Markdown file.) See Lectures 7 8 details . Question 3B: Now, install igraph UWBiost561 package R. igraph package can installed usual (.e., via install.packages(igraph) interactive R session Bayes). Lecture 8 https://docs.google.com/document/d/1-ZTDPp39zbhsKbQ2FfBoCtiXKQj0jQSg75MAatYfiGI/edit?usp=sharing give options install UWBiost561 package Bayes. (nothing report question.) Question 3C: Now, run simulation study. terminal, means 1) navigate UWBiost561/vignettes folder Bayes (might something like cd ~/UWBiost561/vignettes) 2) run command: sbatch HW4_simulation_execute.slurm. Note 1: question might cause pain since might know script working intended. (Additionally, suppose test simulation function thoroughly. case, HW4_simulation_execute.slurm script might crash, ’ll forced debug UWBiost561 package re-install , etc. ’s pain. Trust , want test simulation function thoroughly Question.) Note 2: parallelize simulation across multiple cores write batch SLURM script submit multiple jobs question. (Many likely working homework similar times, guarantee server can allow entire course students submit parallelized jobs simultaneously.) note make sense , don’t worry . (nothing report question. simply running HW4_simulation_execute.slurm file.) Question 3D: Finally, create file called HW4_simulation_plot.R vignettes folder. design script load saved results HW4_simulation.RData, visualize results, save plot vignettes folder. Name one plot HW4_simulation.png. (can save plot different file format, .png easiest one work .) complicated script ? depends results saved HW4_simulation.RData. example, saved clique size method trial level, might need compute average clique size across trials level script. plot? depends simulation plan intended study (wrote Question 2B). ’m leaving open-ended can practice determining best demonstrate results ’re trying study. Note 1: can run HW4_simulation_plot.R script interactively Bayes. need write .slurm script prefer (since entire HW4_simulation_plot.R script take minutes run. , ’re simply loading plotting results. shouldn’t fancy computation performed script, indeed, shouldn’t computing maximal partial cliques script). Note 2: Feel free consult https://r-graph-gallery.com/ get ideas meaningfully visualize results. (nothing report question. code vignettes folder, R Markdown file.) Question 3E: Now, Bayes, least four new files vignettes folder due Question 3A-3D: HW4_simulation_execute.R, HW4_simulation_execute.slurm, HW4_simulation_plot.R, HW4_simulation.png. (might many files, okay files needed.) Commit push files via Git (using command line Bayes) onto GitHub.com (via git push), pull files via Git onto local laptop. (can pull either command line via git pull RStudio GUI.) Finally, include plot R Markdown file. (’m put plot vignettes folder push/pull UWBiost561 package ’m assuming knit HW4.Rmd file locally laptop, need somehow get plot Bayes onto local laptop.)","code":"# won't work for some reason #knitr::include_graphics(\"~/UWBiost561/UWBiost561/vignettes/hw4-demo_bayes_plot.png\")"},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"q4-describing-your-final-project","dir":"Articles","previous_headings":"","what":"Q4: Describing your final project","title":"BIOST 561: Homework 4","text":"Intent: intent question make sure plan final project. release final project specifications (, involve making PkgDown website R package choosing scope) Canvas. released (latest) May 19th. Please write (one five sentences) thinking final project. answer hasn’t changed since HW3, can copy-paste answer HW3 question HW4. basic final project outlined.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/HW4.html","id":"q5-feedback-optional","dir":"Articles","previous_headings":"","what":"Q5: Feedback (Optional)","title":"BIOST 561: Homework 4","text":"“question” additional way students communicate instructors. include positive feedback topics enjoyed learning module, critiques course difficulty/pacing, questions/confusions course material. feedback can help shape course rest quarter future years. Please mindful polite providing feedback. may leave question blank. instructions unclear connect Bayes. 3A think want us upload github pull Bayes, 3B says connect Bayes Finally, hard time connecting Bayes without getting kicked , timed , unable open Open Sesame. can easily run simulation laptop create image. don’t feel confident Bayes. #Final Note: use rmarkdown::render(“vignettes/HW4.Rmd”) console (Rmd)","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/project.html","id":"directions","dir":"Articles","previous_headings":"","what":"Directions","title":"BIOST 561: Final project","text":"Please read directions starting, please post Canvas Discussions questions (example, regarding specifications progress final project meets intended criteria) need make PkgDown website R package need submit R Markdown files (neither Canvas vignettes) final project need add (Kevin) GitHub collaborator R package’s GitHub, since GitHub necessarily public (.e., viewable entire internet) order PkgDown website Please email PkgDown URL (since might working PkgDown R package isn’t UWBiost561 package). reply email confirm receipt submission. Reminder: Remember, course Credit/-Credit, might courses finals graded projects. , please budget time appropriately commitments. feel overwhelmed end quarter, please feel free simplify scope course’s final project. (still encourage complete intended vision package time quarter though!)  get full credit final project long specified ingredients .","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/project.html","id":"final-project-overview","dir":"Articles","previous_headings":"","what":"Final project overview","title":"BIOST 561: Final project","text":"project, ’ll making PkgDown website looks like https://linnykos.github.io/561_s2024_example/. Briefly, involve: R package includes R code (possibly code languages) solve problem. problem can large small scope want. Documentation exported R functions. vignette explains use R functions. README page explains purpose R package. public PkgDown website R package hosted via GitHub. (can take website grade course submitted.) Optionally, encourage following (’s required): Unit tests R functions. 100% okay “reuse” R code another course (either past current, even previous institution). Ideally, choose coding project care foundation final project, already R code, remains “everything else.” need many functions complex functions. Realistically, can use meaningful subset functions existing code base project. Note: PkgDown website public. worried intended project (either afraid “scooped” working critically sensitive research project using sensitive data), ask defer side caution instead, use UWBiost561 R project final. (general, though, don’t expect R packages sensitive. Feel free discuss privately concerned.). Also, ’m done grading final project, feel free immediately take PkgDown website.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/project.html","id":"final-project-specifications","dir":"Articles","previous_headings":"","what":"Final project specifications","title":"BIOST 561: Final project","text":"Specifications R package : refer previous homeworks remember set R package. need make public GitHub repository R package. R package pass devtools::check() (else PkgDown website might build correctly) Specifications documentation: function name, function description, descriptions inputs, description outputs, small example using function Specifications vignette: vignette “self-contained.” means include explicit directions downloading data suitable vignette, package R function generate synthetic data. Personally, think ’s much easier write simple function simulates data scratch vignette instead figuring host dataset. least 3 documented functions used vignette. (example, typical choice one function wrote generates simulated data, one function wrote estimates parameters based simulated data, one function plots summarizes results estimates) Specifications README: See https://raw.githubusercontent.com/linnykos/561_s2024_example/main/README.md example example, former https://github.com/linnykos/561_s2024_example latter https://linnykos.github.io/561_s2024_example/ also include directions install R package. (easiest way showcase install package using devtools::install_github() function.) “working” PkgDown website means: PkgDown website following pages upon completion: landing page (analogous https://linnykos.github.io/561_s2024_example/) “Get started” (similarly named) webpage (analogous https://linnykos.github.io/561_s2024_example/articles/UW561S2024Example.html). vignette generated based R Markdown file include vignettes folder named R package (see https://github.com/linnykos/561_s2024_example/blob/main/vignettes/UW561S2024Example.Rmd) “Reference” (similarly named) webpage (analogous https://linnykos.github.io/561_s2024_example/reference/index.html). created based ROxygen documentations write functions R folder","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/project.html","id":"for-those-of-you-using-the-uwbiost561-package-for-this-project","dir":"Articles","previous_headings":"","what":"(For those of you using the UWBiost561 package for this project)","title":"BIOST 561: Final project","text":"planning use UWBiost561 (100% okay), please aware following notes: , need go Settings page GitHub repository. example, might https://github.com/UW561/UWBiost561/settings. , scroll “Danger Zone” want “Change repository visibility” “Change public”. PkgDown create pages vignette vignettes folder (currently homeworks). Hence, making PkgDown, might want delete HW1 HW4 vignettes UWBiost561 package. (Don’t worry – since GitHub repository, ’s actually “deleted”.) long received completion 4 HWs (.e., 4 closed GitHub issues ), nothing worry . However, starting PkgDown received completion 4 HWs, need email (Kevin) HW (HTML R Markdown files) still completed. Showing generate graph random partial clique (using generate_partial_clique() function HW3), Showing compute maximal partial clique using compute_maximal_partial_clique implementations HW4 (necessarily one wrote HW3), Showing perform small simulation study using function wrote HW4 Question 2. (particular simulation study take less 3 minutes run. R needs re-run entire simulation every time wants knit vignette rebuild website, want simulation study takes long run.) suggestion, though, can write whatever vignette want long showcases 3 different functions UWBiost561 package can include new functions UWBiost561 package. instance, can make plotting function HW2 Question 3 function UWBiost561 package showcase vignette.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/articles/project.html","id":"useful-references","dir":"Articles","previous_headings":"","what":"Useful references","title":"BIOST 561: Final project","text":"class’s Google Docs additional notes make PkgDown : https://docs.google.com/document/d/1SqaCv2m4uvvwvfcc48FGSxW5O1Z53hXKw8QJofAUBrk/edit?usp=sharing. https://www.youtube.com/watch?v=IRtOORWdKGI: YouTube video contains essentially steps need follow https://psyteachr.github.io/intro-r-pkgs/07-pkgdown.html: website YouTube video based https://pkgdown.r-lib.org/articles/pkgdown.html https://www.r-bloggers.com/2017/08/building--website--pkgdown--short-guide/","code":""},{"path":"https://cindyc2.github.io/UWBiost561/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). UWBiost561: Package (One Line, Title Case). R package version 0.0.0.9000, https://cindyc2.github.io/UWBiost561/.","code":"@Manual{,   title = {UWBiost561: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://cindyc2.github.io/UWBiost561/}, }"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_correct_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the correct density, given a set of nodes — compute_correct_density","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"define clique_idx length 1 density 1.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_correct_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"","code":"compute_correct_density(adj_mat, clique_idx)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_correct_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"adj_mat symmetric matrix values 0 1, 1's along diagonal, row- column-names, 5 50  rows/columns (inclusive). clique_idx numeric vector index numbers corresponding nodes (.e., values 1 nrow(adj_mat)) function deems maximum partial clique. vector duplicate elements, must positive integers, largest value exceed nrow(adj_mat)","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_correct_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"numeric, density edges among adj_mat[clique_idx,clique_idx]","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique.html","id":null,"dir":"Reference","previous_headings":"","what":"'Compute Maximal Partial Clique A package that barely passes this assignment. It computes the ","title":"'Compute Maximal Partial Clique A package that barely passes this assignment. It computes the ","text":"'Compute Maximal Partial Clique package barely passes assignment. computes \"largest partial clique\" can find using R. Given adjacency matrix adj_mat required edge density alpha, program determine matrix diagonal, (meaning nodes connection.) , return 1 node clique density 1. matrix diagonal, least one edge. program list first edge finds largest partial clique. quite probable largest clique larger, program care. Also tell cliques equal size. (likely graphs 1 edge.) Good luck finding package help!","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Compute Maximal Partial Clique A package that barely passes this assignment. It computes the ","text":"","code":"compute_maximal_partial_clique(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Compute Maximal Partial Clique A package that barely passes this assignment. It computes the ","text":"adj_mat adjacency matrix tested loaded function alpha density level partial clique requested","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Compute Maximal Partial Clique A package that barely passes this assignment. It computes the ","text":"list clique index largest partial clique adjacency matrix, edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute maximal partial clique — compute_maximal_partial_clique1","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Determines indices corresponding maximal partial clique adjacency matrix given partial clique density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"","code":"compute_maximal_partial_clique1(adj_mat, alpha, method = c(\"simple\", \"pivot\"))"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"adj_mat symmetric adjacency matrix 5-50 rows columns. alpha numeric value 0.5 1 (inclusive) indicating minimum fraction edges among nodes outputted partial clique. method One \"simple\" \"pivot\". \"simple\" searches maximal partial clique using modified version original Bron-Kerbosch algorithm, \"pivot\" uses modified version Bron-Kerbosch algorith pivot (Bron & Kerbosch 1973).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Outputs list containing clique_idx: vector indices form partial clique edge_density: Percentage edges adj_mat among nodes clique_idx.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"function uses modified versions Bron-Kerbosch algorithm, designed compute maximal full cliques, compute maximal partial cliques, allowing users specify \"simple\" \"pivot\" (Bron & Kerbosch 1973). Specifically, alpha < 1, algorithm modified candidate excluded nodes iteration restricted neighbors. Rather, candidate clique initially reported maximal clique satisfies density alpha/2 (help find cliques two nodes alone satisfy alpha density, together clique ), searches final results choose largest clique satisfies alpha. alpha = 1 set, Bron-Kerbosch algorithm applied directly. Using","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute maximal partial clique — compute_maximal_partial_clique1","text":"Bron, C., & Kerbosch, J. (1973). Algorithm 457: finding cliques undirected graph. Communications ACM, 16(9), 575-577.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique10.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the maximal partial clique function — compute_maximal_partial_clique10","title":"Compute the maximal partial clique function — compute_maximal_partial_clique10","text":"function computes largest partial clique given adjacency matrix adj_mat required edge density alpha.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the maximal partial clique function — compute_maximal_partial_clique10","text":"","code":"compute_maximal_partial_clique10(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the maximal partial clique function — compute_maximal_partial_clique10","text":"adj_mat adjacency matrix representing connections nodes graph. matrix symmetric, ones along diagonal representing self-loops zeros ones elsewhere representing absence presence edges nodes, respectively. alpha required edge density among nodes maximal partial clique. value numeric scalar 0.5 1, inclusive.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique10.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the maximal partial clique function — compute_maximal_partial_clique10","text":"list containing index numbers nodes forming maximal partial clique (clique_idx) corresponding edge density (edge_density) among nodes.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique10.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the maximal partial clique function — compute_maximal_partial_clique10","text":"function iteratively searches largest partial clique graph removing nodes meet required edge density criterion. initializes partial clique nodes graph gradually removes nodes remaining subset nodes forms partial clique edge density greater equal specified alpha. resulting partial clique returned along calculated edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique11.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute partial clique — compute_maximal_partial_clique11","title":"Compute partial clique — compute_maximal_partial_clique11","text":"Randomly try bunch cliques return largest one passes threshold","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique11.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute partial clique — compute_maximal_partial_clique11","text":"","code":"compute_maximal_partial_clique11(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique11.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute partial clique — compute_maximal_partial_clique11","text":"adj_mat adjacency matrix 0,1 alpha minimum edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique11.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute partial clique — compute_maximal_partial_clique11","text":"list containing maximum partial clique density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique12.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — compute_maximal_partial_clique12","title":"Title — compute_maximal_partial_clique12","text":"Title","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique12.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — compute_maximal_partial_clique12","text":"","code":"compute_maximal_partial_clique12(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique12.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — compute_maximal_partial_clique12","text":"adj_mat matrix alpha value","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique12.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — compute_maximal_partial_clique12","text":"list","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique13.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — compute_maximal_partial_clique13","title":"Title — compute_maximal_partial_clique13","text":"Title","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique13.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — compute_maximal_partial_clique13","text":"","code":"compute_maximal_partial_clique13(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique13.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — compute_maximal_partial_clique13","text":"adj_mat adjacency matrix alpha edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique13.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — compute_maximal_partial_clique13","text":"list","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique14.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Maximal Partial Clique — compute_maximal_partial_clique14","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique14","text":"Compute Maximal Partial Clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique14.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique14","text":"","code":"compute_maximal_partial_clique14(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique14.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique14","text":"adj_mat adjacency matrix representing graph. alpha minimum required edge density partial clique, 0.5 1.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique14.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique14","text":"list containing clique_idx (numeric vector indices) edge_density (numeric proportion edges partial clique).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique15.html","id":null,"dir":"Reference","previous_headings":"","what":"Find hte matximal partial clique — compute_maximal_partial_clique15","title":"Find hte matximal partial clique — compute_maximal_partial_clique15","text":"Start first entry, iteratively add nodes. first moment find valid click, stop","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique15.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find hte matximal partial clique — compute_maximal_partial_clique15","text":"","code":"compute_maximal_partial_clique15(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique15.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find hte matximal partial clique — compute_maximal_partial_clique15","text":"adj_mat graph alpha minimum threshold stop","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique15.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find hte matximal partial clique — compute_maximal_partial_clique15","text":"list","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique16.html","id":null,"dir":"Reference","previous_headings":"","what":"Find maximal partial clique — compute_maximal_partial_clique16","title":"Find maximal partial clique — compute_maximal_partial_clique16","text":"Find maximal partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique16.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find maximal partial clique — compute_maximal_partial_clique16","text":"","code":"compute_maximal_partial_clique16(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique16.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find maximal partial clique — compute_maximal_partial_clique16","text":"adj_mat matrix alpha value","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique16.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find maximal partial clique — compute_maximal_partial_clique16","text":"list","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique17.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the maximal partial clique in an adjacency matrix — compute_maximal_partial_clique17","title":"Compute the maximal partial clique in an adjacency matrix — compute_maximal_partial_clique17","text":"Enumerate row find edges Start first row first partial clique subsequent row, check connects existing partial cliques. , append existing partial cliques; , create new partial clique row. Return partial clique nodes","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique17.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the maximal partial clique in an adjacency matrix — compute_maximal_partial_clique17","text":"","code":"compute_maximal_partial_clique17(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique17.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the maximal partial clique in an adjacency matrix — compute_maximal_partial_clique17","text":"adj_mat symmetric adjacency matrix alpha edge density adjacency matrix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique17.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the maximal partial clique in an adjacency matrix — compute_maximal_partial_clique17","text":"list containing indices maximal partial clique, edge density maximal partial clique, partial cliques adjacency matrix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique18.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute the size of the maximal partial clique of an adjacency matrix — compute_maximal_partial_clique18","title":"A function to compute the size of the maximal partial clique of an adjacency matrix — compute_maximal_partial_clique18","text":"Computes maximum size partial clique adjacency matrix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute the size of the maximal partial clique of an adjacency matrix — compute_maximal_partial_clique18","text":"","code":"compute_maximal_partial_clique18(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique18.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute the size of the maximal partial clique of an adjacency matrix — compute_maximal_partial_clique18","text":"adj_mat symmetric diagonal adjacency matrix alpha threshold maximum number edges partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique18.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute the size of the maximal partial clique of an adjacency matrix — compute_maximal_partial_clique18","text":"index vector showing first maximal partial clique exceeds threshold, \"first\" decided order possible cliques determined utils::combn function. Also returns edge density particular partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique19.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Maximal Partial Clique in an Adjacency Matrix — compute_maximal_partial_clique19","title":"Compute the Maximal Partial Clique in an Adjacency Matrix — compute_maximal_partial_clique19","text":"function evaluates adjacency matrix identify largest set nodes forms partial clique, meeting specified edge density threshold. searches largest group nodes internal connectivity meets exceeds given proportion maximum possible edges (alpha). search exhaustive, checking possible combinations nodes ensure largest possible clique found satisfies density requirement. method computationally intensive thorough, intended provide best possible clique given constraints.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Maximal Partial Clique in an Adjacency Matrix — compute_maximal_partial_clique19","text":"","code":"compute_maximal_partial_clique19(adj_mat, alpha = 0.5)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique19.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Maximal Partial Clique in an Adjacency Matrix — compute_maximal_partial_clique19","text":"adj_mat symmetric adjacency matrix representing graph, matrix n x n, contains 0s 1s, 1s diagonal, lacks row column names. matrix size must 5 50 nodes inclusive. alpha numeric value 0.5 1 inclusive, specifying minimum required edge density within clique proportion fully connected clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique19.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Maximal Partial Clique in an Adjacency Matrix — compute_maximal_partial_clique19","text":"list containing two elements: clique_idx, numeric vector listing indices nodes form maximal partial clique, edge_density, actual edge density within clique. edge density computed number existing edges divided number possible edges among nodes clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"Compute largest partial clique given adjacency matrix required edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"","code":"compute_maximal_partial_clique2(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"adj_mat adjacency matrix values 0 1 alpha required edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the largest partial clique given an adjacency matrix and a required edge density — compute_maximal_partial_clique2","text":"list index numbers corresponding nodes maximal partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique20.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Maximal Partial Clique — compute_maximal_partial_clique20","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique20","text":"function calculates largest subset nodes within adjacency matrix forms partial clique meeting specified edge density threshold. function employs heuristic approach handle computationally challenging nature task.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique20","text":"","code":"compute_maximal_partial_clique20(adj_mat, alpha, verbose = 0)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique20.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique20","text":"adj_mat square symmetric adjacency matrix element either 0 1, diagonal elements 0. alpha numeric value 0.5 1 specifies minimum required edge density partial clique. verbose boolean","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique20.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique20","text":"list containing: clique_idxA numeric vector indices representing nodes maximal partial clique. edge_densityThe edge density found clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique21.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the maximal partial clique — compute_maximal_partial_clique21","title":"Find the maximal partial clique — compute_maximal_partial_clique21","text":"Computes largest partial clique given adjacency matrix adj_mat required edge density alpha. method computes edge density partial clique possible node combinations selects one largest edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique21.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the maximal partial clique — compute_maximal_partial_clique21","text":"","code":"compute_maximal_partial_clique21(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique21.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the maximal partial clique — compute_maximal_partial_clique21","text":"adj_mat adjacency matrix row- column-names, 5 50 rows/columns (inclusive). alpha value 0.5 1 (inclusive), edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique21.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the maximal partial clique — compute_maximal_partial_clique21","text":"list element clique_ind, vector index numbers largest partial clique, element edge_density, percentage edges adj_mat among nodes clique_idx","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique22.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Maximal Partial Clique — compute_maximal_partial_clique22","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique22","text":"function identifies largest subset nodes adjacency matrix forms partial clique meeting specified minimum edge density (alpha).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique22.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique22","text":"","code":"compute_maximal_partial_clique22(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique22.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique22","text":"adj_mat symmetric matrix representing adjacency matrix graph. alpha numeric value 0.5 1 indicating minimum edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique22.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Maximal Partial Clique — compute_maximal_partial_clique22","text":"list indices nodes edge density clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique23.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the largest partial clique — compute_maximal_partial_clique23","title":"Compute the largest partial clique — compute_maximal_partial_clique23","text":"function computes largest partial clique given adjacency matrix required edge density alpha.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique23.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the largest partial clique — compute_maximal_partial_clique23","text":"","code":"compute_maximal_partial_clique23(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique23.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the largest partial clique — compute_maximal_partial_clique23","text":"adj_mat adjacency matrix representing graph. alpha required edge density partial clique, must 0 1.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique23.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the largest partial clique — compute_maximal_partial_clique23","text":"list containing: node_ids vector containing indices vertices computed maximal partial clique. edge_density edge density computed maximal partial clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique24.html","id":null,"dir":"Reference","previous_headings":"","what":"I'm not sure if this will work... — compute_maximal_partial_clique24","title":"I'm not sure if this will work... — compute_maximal_partial_clique24","text":"function output one edge, satisfy definition clique likely largest one","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"I'm not sure if this will work... — compute_maximal_partial_clique24","text":"","code":"compute_maximal_partial_clique24(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"I'm not sure if this will work... — compute_maximal_partial_clique24","text":"adj_mat matrix alpha value","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"I'm not sure if this will work... — compute_maximal_partial_clique24","text":"list","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique25.html","id":null,"dir":"Reference","previous_headings":"","what":"This function identifies the largest partial clique based on the given adjacency matrix and a required edge density. — compute_maximal_partial_clique25","title":"This function identifies the largest partial clique based on the given adjacency matrix and a required edge density. — compute_maximal_partial_clique25","text":"function identifies largest partial clique based given adjacency matrix required edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique25.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function identifies the largest partial clique based on the given adjacency matrix and a required edge density. — compute_maximal_partial_clique25","text":"","code":"compute_maximal_partial_clique25(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique25.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function identifies the largest partial clique based on the given adjacency matrix and a required edge density. — compute_maximal_partial_clique25","text":"adj_mat symmetric matrix (0-1) representing adjacency relationships among nodes. alpha numeric value 0.5 1 (inclusive) representing required edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique25.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function identifies the largest partial clique based on the given adjacency matrix and a required edge density. — compute_maximal_partial_clique25","text":"list containing index vector nodes maximal partial clique (clique_idx) computed edge density (edge_density).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique3.html","id":null,"dir":"Reference","previous_headings":"","what":"compute_maximal_partial_clique3 — compute_maximal_partial_clique3","title":"compute_maximal_partial_clique3 — compute_maximal_partial_clique3","text":"compute_maximal_partial_clique3","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute_maximal_partial_clique3 — compute_maximal_partial_clique3","text":"","code":"compute_maximal_partial_clique3(adj_mat, alpha, max_iteration = 1000)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute_maximal_partial_clique3 — compute_maximal_partial_clique3","text":"adj_mat symmetrical matrix 0s 1s. diagonal must 1s 5 ~ 50 rows alpha prespecified density can accept partial connected clique max_iteration maximum number iterations","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compute_maximal_partial_clique3 — compute_maximal_partial_clique3","text":"number nodes included maximam partial clique actual density clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique4.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute maximal partial clique — compute_maximal_partial_clique4","title":"Compute maximal partial clique — compute_maximal_partial_clique4","text":"Computes maximal partial clique given adjacency matrix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute maximal partial clique — compute_maximal_partial_clique4","text":"","code":"compute_maximal_partial_clique4(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute maximal partial clique — compute_maximal_partial_clique4","text":"adj_mat adjacency matrix - symmetric matrix 0s 1s 1s along diagonal 5 50 rows/columns alpha edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute maximal partial clique — compute_maximal_partial_clique4","text":"vector index numbers nodes maximal partial clique along edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique5.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute maximal partial clique — compute_maximal_partial_clique5","title":"Compute maximal partial clique — compute_maximal_partial_clique5","text":"function first computes maximal full clique records index numbers, tries adding additional node maximal full clique. one node makes new clique satisfy requirement, function tries adding 2 additional nodes previous maximal full clique repeats procedure test different nodes combinations. procedure goes case adding y nodes, combination y nodes satisfy requirement. returns index numbers maximal full clique well y-1 nodes selected previously clique_idx.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute maximal partial clique — compute_maximal_partial_clique5","text":"","code":"compute_maximal_partial_clique5(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute maximal partial clique — compute_maximal_partial_clique5","text":"adj_mat adjacency matrix alpha required edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute maximal partial clique — compute_maximal_partial_clique5","text":"numeric vector index numbers maximum partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique6.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximal Partial Clique Computation — compute_maximal_partial_clique6","title":"Maximal Partial Clique Computation — compute_maximal_partial_clique6","text":"function computes maximal partial clique given adjacency matrix edge density threshold. iterates nodes identify largest subset pair nodes densely connected enough.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximal Partial Clique Computation — compute_maximal_partial_clique6","text":"","code":"compute_maximal_partial_clique6(adj_mat, alpha, ...)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximal Partial Clique Computation — compute_maximal_partial_clique6","text":"adj_mat symmetric adjacency matrix values 0 1. must 1’s along diagonal, row- column-names, 5 50 rows/columns (inclusive). alpha numeric value 0.5 1 (inclusive) specifying density requirement maximal partial clique. ... Additional arguments (currently used).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximal Partial Clique Computation — compute_maximal_partial_clique6","text":"list named elements: clique_idx numeric vector index numbers corresponding nodes maximum partial clique. edge_density percentage edges adj_mat among nodes clique_idx.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique7.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the largest partial clique within a given adjacency matrix — compute_maximal_partial_clique7","title":"Find the largest partial clique within a given adjacency matrix — compute_maximal_partial_clique7","text":"Find largest partial clique within given adjacency matrix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the largest partial clique within a given adjacency matrix — compute_maximal_partial_clique7","text":"","code":"compute_maximal_partial_clique7(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the largest partial clique within a given adjacency matrix — compute_maximal_partial_clique7","text":"adj_mat adjacency matrix within largest partial clique searched alpha minimum required edge density partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the largest partial clique within a given adjacency matrix — compute_maximal_partial_clique7","text":"list containing indices nodes within clique actual edge density return partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique8.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Maximal Partial Clique — compute_maximal_partial_clique8","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique8","text":"Given adjacency matrix adj_mat required edge density alpha, program determine matrix diagonal, (meaning nodes connection.) , return 1 node clique density 1. matrix diagonal, least one edge. program list first edge finds largest partial clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique8","text":"","code":"compute_maximal_partial_clique8(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique8","text":"adj_mat adjacency matrix tested loaded function alpha density level partial clique requested","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique8","text":"list clique index largest partial clique adjacency matrix, edge density","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique9.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Maximal Partial Clique — compute_maximal_partial_clique9","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique9","text":"function attempts find maximal partial clique edge density least great specified alpha value given adjacency matrix. function searches possible combinations nodes, evaluating set specified edge density.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique9.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique9","text":"","code":"compute_maximal_partial_clique9(adj_mat, alpha = 0.5)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique9.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique9","text":"adj_mat symmetric adjacency matrix element either 0 1. matrix represents graph looking clique. matrix square, diagonal elements set 1. alpha numeric value 0 1 inclusive, specifying minimum edge density required partial clique. threshold decide subsets nodes form valid clique based internal connectivity.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique9.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique9","text":"list containing two elements: clique_idx, vector node indices forming maximal partial clique required density, edge_density, actual edge density found clique. clique meets criteria, clique_idx empty integer vector edge_density 0.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":null,"dir":"Reference","previous_headings":"","what":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"function runs implementation (dictated number) using inputs adj_mat alpha. example, compute_maximal_partial_clique_master(adj_mat, alpha, number = 5) executes compute_maximal_partial_clique5(adj_mat, alpha).","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"","code":"compute_maximal_partial_clique_master(adj_mat, alpha, number, time_limit = 30)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"adj_mat symmetric matrix values 0 1, 1's along diagonal, row- column-names, 5 50  rows/columns (inclusive) alpha single numeric (.e., length 1), value 0.5 1 (inclusive) number implementation number use time_limit number seconds implementation times ","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"list clique_idx, edge_density (implementation ) status valid (added function)","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"implementation errors (.e., crashes), output status error. implementation complete within time_limit number seconds (.e., took long), output status timed_out. valid output boolean whether provided clique_idx forms valid partial clique. method status timed_out error, method (default) valid=FALSE.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-calculate_maximum_candidate_18.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute the upper bound of the clique size — .calculate_maximum_candidate_18","title":"A function to compute the upper bound of the clique size — .calculate_maximum_candidate_18","text":"Given adjacency matrix, function uses sum adjacency matrix upper bound possible clique size","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-calculate_maximum_candidate_18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute the upper bound of the clique size — .calculate_maximum_candidate_18","text":"","code":".calculate_maximum_candidate_18(adj_mat, alpha)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-calculate_maximum_candidate_18.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute the upper bound of the clique size — .calculate_maximum_candidate_18","text":"adj_mat symmetric diagonal adjacency matrix alpha threshold maximum number edges partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-calculate_maximum_candidate_18.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute the upper bound of the clique size — .calculate_maximum_candidate_18","text":"upper bound clique size","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-fixed_combn_18.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate combinations while fixing the first k elements — .fixed_combn_18","title":"Generate combinations while fixing the first k elements — .fixed_combn_18","text":"Generate combinations fixing first k elements","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-fixed_combn_18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate combinations while fixing the first k elements — .fixed_combn_18","text":"","code":".fixed_combn_18(vec, c, k)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-fixed_combn_18.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate combinations while fixing the first k elements — .fixed_combn_18","text":"vec vector choose c number elements choose k number elements fix","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-fixed_combn_18.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate combinations while fixing the first k elements — .fixed_combn_18","text":"matrix combinations","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-minimum_searcher_18.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that further restricts the candidate nodes for a partial clique — .minimum_searcher_18","title":"A function that further restricts the candidate nodes for a partial clique — .minimum_searcher_18","text":"Given set candidate nodes, function restricts candidate nodes partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-minimum_searcher_18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that further restricts the candidate nodes for a partial clique — .minimum_searcher_18","text":"","code":".minimum_searcher_18(adj_mat, candidates, c, at_least_total)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-minimum_searcher_18.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that further restricts the candidate nodes for a partial clique — .minimum_searcher_18","text":"adj_mat symmetric diagonal adjacency matrix candidates set candidate nodes c size partial clique at_least_total minimum number edges partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-minimum_searcher_18.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that further restricts the candidate nodes for a partial clique — .minimum_searcher_18","text":"minimum number edges per node","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-pruned_cols_18.html","id":null,"dir":"Reference","previous_headings":"","what":"Prunes columns that can be a part of a partial clique of size c — .pruned_cols_18","title":"Prunes columns that can be a part of a partial clique of size c — .pruned_cols_18","text":"Prunes columns can part partial clique size c","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-pruned_cols_18.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prunes columns that can be a part of a partial clique of size c — .pruned_cols_18","text":"","code":".pruned_cols_18(adj_mat, alpha, c)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-pruned_cols_18.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prunes columns that can be a part of a partial clique of size c — .pruned_cols_18","text":"adj_mat symmetric diagonal adjacency matrix alpha threshold maximum number edges partial clique c size partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/dot-pruned_cols_18.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prunes columns that can be a part of a partial clique of size c — .pruned_cols_18","text":"Candidate rows may part partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/generate_partial_clique.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Random Graph This package is based off of the generate random clique function. It simply removes 1 edge from the full clique. — generate_partial_clique","title":"Generate Random Graph This package is based off of the generate random clique function. It simply removes 1 edge from the full clique. — generate_partial_clique","text":"Generate Random Graph package based generate random clique function. simply removes 1 edge full clique.","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/generate_partial_clique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Random Graph This package is based off of the generate random clique function. It simply removes 1 edge from the full clique. — generate_partial_clique","text":"","code":"generate_partial_clique(n, clique_fraction, clique_edge_density)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/generate_partial_clique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Random Graph This package is based off of the generate random clique function. It simply removes 1 edge from the full clique. — generate_partial_clique","text":"n number nodes requested graph (soon matrix) n = number nodes graph (along diagonal matrix) .e. represent , result n rows also n columns show connections matrix n*n n   choose number function clique_fraction fraction total nodes graph connected partial clique clique_fraction   choose number function. fully connected clique clique faction =1. clique_edge_density edge density means proportion clique connected. fully connected clique clique_edge_density = 1 choose number function","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/generate_partial_clique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Random Graph This package is based off of the generate random clique function. It simply removes 1 edge from the full clique. — generate_partial_clique","text":"adj_mat  newly-created adjacency matrix fit specifications given ","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/is_partial_clique_7.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check if a set of nodes forms a partial clique — is_partial_clique_7","title":"Helper function to check if a set of nodes forms a partial clique — is_partial_clique_7","text":"Helper function check set nodes forms partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/is_partial_clique_7.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check if a set of nodes forms a partial clique — is_partial_clique_7","text":"","code":"is_partial_clique_7(submatrix, alpha = 1)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/is_partial_clique_7.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check if a set of nodes forms a partial clique — is_partial_clique_7","text":"submatrix submatrix formed set nodes alpha minimum required edge density partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/is_partial_clique_7.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check if a set of nodes forms a partial clique — is_partial_clique_7","text":"TRUE FALSE depending whether given sub-matrix forms partial clique TRUE FALSE depending whether given submatrix forms partial clique","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/my_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — my_function","title":"Title — my_function","text":"Title","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/my_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — my_function","text":"","code":"my_function(num_trials = 5, imp_numbers = 1:25)"},{"path":"https://cindyc2.github.io/UWBiost561/reference/my_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — my_function","text":"num_trials Number Trials per implementation imp_numbers Implementation Number (numbers) use simulation. can using 1:25","code":""},{"path":"https://cindyc2.github.io/UWBiost561/reference/my_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — my_function","text":"list","code":""}]
